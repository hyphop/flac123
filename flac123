#!/usr/bin/perl

## hyphop ## 

# 2015 
# https://github.com/hyphop/flac123/blob/master/LICENSE

sub info { print <<end
# flac321  - command line oggFLAC stream radio player like ogg123/mpg123
# ver 0.1b - currently used ffmpeg or mpv for audio play
#	     and wget or curl network connections
# USAGE 
#	flac321 [url]
# 
# FEATURES
# 	chained streams + display vorbis meta tags by tracks
# OPTIONS
#	--no-fancy	disable fancy meta tags output
#	--no-icy	dont display icy headers
#	--no-audio	disable audio output, display meta only
#	-6 / -4 	ipv6 / ipv4 use only
#	-d 		audio output device name
# EXAMPLES
#	flac321 http://ai-radio.org/flac
# GET & RUN BY ONE LINE 
# 	wget http://ai-radio.org/get/flac123 -O- | perl "" http://ai-radio.org/flac
# DOWNLOAD
#	wget http://ai-radio.org/get/flac321
# INSTALL
#	chmod 0755 flac321
# LINKS
#	https://github.com/hyphop/flac123
#
# ~/.flac321rc - user config file
# 
# echo stream_default http://ai-radio.org/flac >> ~/.flac321rc 
# echo reconnect_auto 0 >> ~/.flac321rc 
#
# config files PARAMS
#
#	NAME		VALUE			DEFAULT
#       ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~  
#	stream_default	URL			""
# 	read_timeout	0-99999 sec		2
#	reconnect_auto  0|1			1
#	reconnect_delay 0-99999 sec		2
#	player_orders	"(mpv|ffplay|ffmpeg)+"	"mpv ffplay ffmpeg"
#	http_order	"(curl|wget)+"		"wget curl"
#	audio_dev   	ALSA DEV NAME		default
#	
# writed for testing chained ogg FLAC streams with vorbis comments
# please send bug reports to http://ai-radio.org/feedback/?flac321
#
# last changed at: Nov 1, 2015
#
end
}
#use common::sense;

eval { unpack "Q", "\xaa" x 8 }; # try 64bit support
our $is64 = $@ ? 0 : 1;

### config vars
our $in;
our $http_headers_display = 1;
our $fancy_no             = 0;
our $audio_no;
our $ipv6;
our $read_timeout = 2;
our $audio_dev;
our $audio_dev_def = 'default';

our $player_order = "mpv ffplay ffmpeg";
our $http_order = "curl wget";

###

while ( $_ = shift @ARGV ) {
    $fancy_no             = 1    if /^-+no-fancy/;
    $http_headers_display = 0    if /^-+no-icy/;
    $in                   = "$_" if /^http/;
    $ipv6                 = 1    if /^-6/;
    $ipv6                 = 0    if /^-4/;
    $audio_no             = 1    if /^-+no-audio/;
    info() and exit 		 if /^\-+h|help/;
    $audio_dev = shift @ARGV	 if /^-d/;
}

# read user configs
user::config($_) for qw{ <&DATA /etc/flac321.conf ~/.flac321rc };
# user::showcfg();

$in //= $user::cfg{stream_default} and
    warn "[i] use default stream $in\n" unless $in;

$read_timeout = 1 * $user::cfg{read_timeout} if $user::cfg{read_timeout};
$player_order = $user::cfg{player_order}     if $user::cfg{player_order};
$http_order   = $user::cfg{http_order}       if $user::cfg{http_order};

$audio_dev = $user::cfg{audio_dev}
  if !defined $audio_dev && $user::cfg{audio_dev};
$audio_dev ||= $audio_dev_def;

#warn "[i] audio dev: $audio_dev\n";

info() and exit unless $in;

$SIG{HUP} = \&hupped;
$SIG{INT} = $SIG{TERM} = \&terminated;

sub hupped {
    warn "[i] sig hupped\n";
}

sub terminated {
    warn "[i] sig term\n";
    $noexit = 0;
    exit(0);
}

$audio_no //= !-d "/proc/asound";    # hmmmm ???? may be wrong method

our $probe_size = 65536*4;

our @mpv = (qw{ mpv --really-quiet --quiet
      --audio-display=no --no-video 
      --demuxer-lavf-probesize  }, $probe_size,
  qw{ --demuxer-lavf-buffersize }, $probe_size,
      "--ao=alsa:device=[$audio_dev]",
  qw{ - });
our @ffmpeg = (qw{ ffmpeg -probesize }, $probe_size, 
    qw{ -nostats -v quiet -i - -f alsa }, $audio_dev );
our @ffplay = (qw{ ffplay -probesize }, $probe_size,
    qw{ -nostats -v quiet -nodisp - });

our %player_params = (
    mpv    => \@mpv,
    ffmpeg => \@ffmpeg,
    ffplay => \@ffplay,
);

our %http_params = (
    curl => \@curl,
    wget => \@wget,
);

our @curl = qw{ curl -sL };
push @curl => $ipv6 ? '-6' : '-4' if defined $ipv6;

push @curl => '-D-' if $http_headers_display;
push @curl => qw{ -A } => "flac321/curl/";

our @wget = qw{ wget -q -O- };
push @wget => '--save-headers' if $http_headers_display;
push @wget => $ipv6 ? '-6' : '-4' if defined $ipv6;
push @wget => qw{ -U } => "flac321/wget/";

our $get = check( map { $http_params{$_} } split /\s+/, $http_order )
  or die "[e] not found any http client";

our $player =
  $audio_no
  ? undef
  : check( map { $player_params{$_} } split /\s+/, $player_order );

our @progress      = qw{ / - \ | };
our $progress_i    = 0;
our $progress_last = 0;

our $IN;
our $noexit = 1;

our $sample_rate = 44100;    # will detected in process playing
#   $sample_rate = 48000;

# FLAC tables

our @sample_rate_table = (
    0,     88200, 176400, 192000, 8000, 16000, 22050, 24000,
    32000, 44100, 48000,  96000,  0,    0,     0,     0
);
our @flac_blocksize_table = (
    0,        192,      576 << 0, 576 << 1, 576 << 2, 576 << 3,
    0,        0,        256 << 0, 256 << 1, 256 << 2, 256 << 3,
    256 << 4, 256 << 5, 256 << 6, 256 << 7
);
our @sample_size_table = ( 0, 8, 12, 0, 16, 20, 24, 0 );

our $reconnect_auto  = 1;
our $reconnect_delay = 1;

$reconnect_auto = $user::cfg{reconnect_auto}
  if defined $user::cfg{reconnect_auto};
$reconnect_delay = $user::cfg{reconnect_delay}
  if $user::cfg{reconnect_delay};

our $reconnect_count;

do {

    play();

    if ( $reconnect_delay )  {
	warn "[i] reconnect delay $reconnect_delay\n";
	sleep $reconnect_delay;
	$reconnect_count++;
    }
} while ( $reconnect_auto );

sub play {

our $OUT;
our $OUT_pid;
if (@$player) {
    $OUT_pid = open $OUT, "|-", @$player;
}
else {
    $OUT_pid = open $OUT, ">/dev/null";
    warn "[i] audio output disabled\n";
}

warn "[i] icy-no:$http_headers_display fancy-no:$fancy_no ".
     "ipv6:$ipv6 64bit:$is64 usage: $get->[0]/$player->[0]\n";
warn "[i] connecting to $in\n";

our $IN_buffer = '';
our $IN_readed = 0;
our $IN_pid    = open $IN, "-|", @$get, $in;
our $in_real   = $in;

binmode $IN;

if ($http_headers_display) {
    while ( readline $IN ) {
        if (m{^HTTP/[\d\.]+\s+(\d+)}) {
            if ( $1 == 200 ) {
            }
            elsif ( $1 == 302 ) {
                while ( readline $IN ) {
                    warn "[i] 302 redirect to $1\n"
                      if /^Location\s*:\s*([^\n]+)/i;
                    $in_real = $1;
                    last if /^\r?\n/;
                }
                next;
            }
            else {
                warn "[e] wrong HTTP $1 answer code\n";
                close $IN;
                $noexit = 0;
                last;
            }
        }
        printf STDERR "%16s\t%s\n" => $1,
          $2
          if /^(Content-Type|icy-\w+)\s*:\s*([^\n]+)/i;

        last if /^\r?\n/;
    }
}

warn "[i] open $in_real\n" if $in ne $in_real;

our $track_begin = time();
our $track_bytes = 0;
our $gp          = 0;

#our $gpd;

our $ogg_page = -1;

our $readed;

while ($noexit) {
    $ogg_page++;

    #$readed = 
    stream_read(&OGG_HEADER_SIZE) or last;
#   my $readed2 = length $_;
#   warn "[i] readed $readed $readed2    \n";
#   last if $readed != &OGG_HEADER_SIZE;

    my @ogg_hdr;

    if ($is64) {
        #                  0 1234567
        @ogg_hdr = unpack 'a4CCQLlLC';
    }
    else {

        # 32 bit method
        # 2**32 = 4294967296 / 44100 = 97391 / 3600 = 27h
        @ogg_hdr = unpack 'a4CCLx4LlLC';

        # can comment next string if stream duration < 27h
        my $q64 = unpack 'x10L'; $ogg_hdr[3] += $q64 * 2**32;
    }

    warn "[e] lost OGG stream signature    \n"
#	. join " " => ( DEBUG => length $_, @ogg_hdr, "\n")
	 and last
      if $ogg_hdr[0] ne &OGG_SIGNATURE;

    #~	bitflags: 0x01: unset = fresh packet
    #~	                set = continued packet
    #~	          0x02: unset = not first page of logical bitstream
    #~	                set = first page of logical bitstream (bos)
    #~	          0x04: unset = not last page of logical bitstream
    #~	                set = last page of logical bitstream (eos)

    stream_read( $ogg_hdr[&OGG_page_segments] ) or last;

    my @ogg_seg_tbl      = unpack "C*";
    my $ogg_payload_size = unpack "%32A*";

    if (0) {
        printf STDERR "[i] readed 27 header OggS 0 f g_position "
          . "serial_num seq _crc_sum__ seg C F L serial_hex\n"
          . join " ", @ogg_hdr => $ogg_payload_size => "\n";
    }

    stream_read($ogg_payload_size) or last;

    #         $_ = substr $_, 0, $ogg_seg_tbl[0];
    #         s/(\W)/sprintf('\x%02X' => ord($1))/eg;
    #         warn "[PAYLOAD DUMP]$_\n";

    my $fb = substr $_, 0, 1;

    if ( $ogg_page < 3 && $fb eq "\xFF" ) {

        # get audio params from 3th ogg packet
        # warn "B".( ( unpack "B16") );
	# 1111111111111000 fixed-blocksize stream

        #...................01
        my @hdr = unpack "x2CC";    # need only 2 bytes

        # warn "B".( (unpack "x2B16")
        #  =~ s/(.{4})(.{4})(.{4})(.{3})(.)/\1.\2.\3.\4.\5/r
        # ); #B1100.1001.1001.100.0
        #audio 44100Hz 16bits ch: 2 chmode: 1 bs: 4096 samples

        push @hdr,

          #0001-1110............2    - blocksize
	  $flac_blocksize_table[ $hdr[0] >> 4 ],

          #0001-1110.............3   - samplerate
          #1001 : 44.1kHz
          #1010 : 48kHz
          $sample_rate_table[ $hdr[0] & 0x0f ],

          #0000-0111..............4  - Channel assignment
          #1000 : left/side stereo
          #1001 : right/side stereo
          #1010 : mid/side stereo
          # or 0000-0111
          # 0 - 1 channel: mono
          # 1 - 2 channels: left, right
          ( $hdr[1] >> 4 ),

          #001-111.................5 - bits per sample
          #100 : 16
          $sample_size_table[ ( $hdr[1] & 0x0f ) >> 1 ];

        $hdr[6] = $hdr[4] < 8 ? $hdr[4] + 1 : 2;
        $hdr[7] = $hdr[5] / 8 * $hdr[6];    # bytes in sample

        $sample_rate = $hdr[3];

        printf STDERR "FLAC audio %d:%d:%d/%d*%d %-20s\n" => $hdr[3],
          $hdr[5], $hdr[6], $hdr[2], $hdr[7], "$get->[0] => $player->[0], reconnect: $reconnect_auto ($reconnect_count)";

    }
    elsif ( $fb eq "\x84" ) {
        vorbis_comments_decode( \$IN_buffer, &OGG_HEADER_SIZE + @ogg_seg_tbl );
    }
    elsif ( $fb eq "\x7F" ) {
        #$track_bytes = 0
    }

    my $op = substr $IN_buffer, 0, length $IN_buffer, '';
    my $w = syswrite $OUT, $op;

    # current position in samples
    my $gpc = $ogg_hdr[&OGG_absolute_granule_position];

    if ( $ogg_hdr[&OGG_header_type_flag] eq 4 ) {
        $ogg_page = -1;
        printf STDERR "track ended at %s%s\n", gp2time( $gpc / $sample_rate ),
          " " x 41;
    }

    #Specify the block size in samples.
    #Subset streams must use one of 192, 576, 1152, 2304,
    # 4608, 256, 512, 1024, 2048, 4096 (and 8192 or 16384
    #  if the sample rate is >48kHz

    my $block_size = $gpc - $gp;
    $gp = $ogg_hdr[&OGG_absolute_granule_position];

    if ($gp) {

        my $a       = int( $gp / $sample_rate );
        my $now     = time();
        my $b       = $now - $track_begin;
        my $bitrate = $block_size
          ? int(
            (
                length($op) # + &OGG_HEADER_SIZE + @ogg_seg_tbl # oggHeader
            ) / ( $block_size / $sample_rate )
          )
          : 0;

        if ( $now - $progress_last > 0 ) {    # update one per sec
            printf STDERR
              "Time: %s bitrate: %4s kbit bs: %5s duration: %s %s   \r",
              gp2time($a),
              int( $bitrate * 8 / 1024 ),
              $block_size,
              gp2time($b),
              $progress[ $progress_i++ % 4 ];
            $progress_last = $now;
        }

    }
}

}


sub gp2time {
    my ( $sec, $min, $hour ) = gmtime $_[0];
    sprintf "%02s:%02s.%02s" => $hour, $min, $sec;
}

sub vorbis_comments_decode {
    my @tags          = ();
    my $b             = $_[0];
    my $o             = $_[1] + 2;
    my @s             = unpack "nL" => substr $$b, $o, 2 + 4;
    my $vendor_string = substr $$b, $o += 2 + 4, $s[1];
    my $c             = unpack "L" => substr $$b, $o += $s[1], 4;

    #warn "[i] vorbis_comments_decode ($vendor_string) $c items\n";
    $o += 4;
    while ( $c-- ) {
        my $l = unpack "L" => substr $$b, $o, 4;
        my $t = substr $$b, $o += 4, $l;
        push @tags, $t unless $fancy_no && $t =~ /^\s/;
        $o += $l;
    }

    syswrite STDERR, join "\n" => @tags => "\n";
}

sub check {

#    while ( my $c = shift ) {
#        my $r = `command -v $c->[0] 2>/dev/null`;

    while ( my $c = shift ) {
#	my $cmd = $_[1]->{$c}->[0];
#	my $cmd = $c;
	my $cmd = $c->[0];

        my $r = `command -v $cmd 2>/dev/null`;

        chomp $r;
        warn "[i] check $cmd => $r\n";
        return $c if $r;

	select undef,undef,undef, 0.2;

    }
    return undef;
}


#
# Ogg stream parser
#

#BEGIN {

sub OGG_SIGNATURE()                 { 'OggS' }
sub OGG_HEADER_SIZE()               { 27 }
sub OGG_capture_pattern()           { 0 }
sub OGG_stream_structure_version()  { 1 }
sub OGG_header_type_flag()          { 2 }
sub OGG_absolute_granule_position() { 3 }
sub OGG_page_serial_number()        { 4 }
sub OGG_page_sequence_no()          { 5 }
sub OGG_page_checksum()             { 6 }
sub OGG_page_segments()             { 7 }

sub CODEC_UNDEF()  { 0 }
sub CODEC_VORBIS() { 1 }
sub CODEC_OPUS()   { 2 }
sub CODEC_FLAC()   { 3 }

sub FLAC_STREAMINFO_SIZE () { 34 }
sub FLAC_MAX_CHANNELS ()    { 8 }
sub FLAC_MIN_BLOCKSIZE ()   { 16 }
sub FLAC_MAX_BLOCKSIZE()    { 65535 }
sub FLAC_MIN_FRAME_SIZE()   { 11 }

sub FLAC_CHMODE_INDEPENDENT () { 0 }
sub FLAC_CHMODE_LEFT_SIDE ()   { 1 }
sub FLAC_CHMODE_RIGHT_SIDE ()  { 2 }
sub FLAC_CHMODE_MID_SIDE ()    { 3 }


sub stream_read {

    my $wait = $_[0];

    eval {

        local $SIG{ALRM} = sub { die "timeout\n" };
        alarm $read_timeout;

        while ( my $r = read $IN, $IN_buffer, $wait, length $IN_buffer ) {
            unless ($r) {
                warn "[w] end of stream\n";
                undef $_;
                return undef;
                close $IN;
            }
            $IN_readed += $r;
            $wait -= $r;
            last unless $wait;
        }

        alarm 0;

    };

    if ($@) {
        warn "[w] read $@";
        return undef;
    }

    unless ( $_[1] ) {
        $_ = substr $IN_buffer, -$_[0], $_[0];
        return length $_;
        #return $_[0];
    }

}

package user;

our %cfg;

sub getfile {
    my $path = $_[0];
    $path =~ s/^~/$ENV{HOME}/;
    #   return undef unless -f $path;
    my $r = open my $fd, $path;
    #warn "[w] open $_[0] $!\n" and
	return undef unless defined $r;
    my $data;
    while ( $r = sysread $fd, $data, 4096, length $data ) { }
    warn "[e] read $_[0] $!" unless defined $r;
    return $data;
}

sub parse {
    my $parsed=0;
    for ( split "\n" => $_[0] ) {
        /^#/
        or
	/\s*(\w+)\s+(\S*)/ and ++$parsed and $cfg{$1} = $2;
    }
    return $parsed
}

sub config {
    return undef unless $_[0];
    parse getfile( $_[0] )
	and warn "[i] readed configs from $_[0]\n";
}

sub showcfg {
    warn "$_: $cfg{$_}\n" for sort keys %cfg;
}

__DATA__
# user config file 
# var value format
# you can comment any line by #
#
# stream_default	http://ai-radio.org/flac
  player_order		ffmpeg mpv ffplay ffmpeg
# http_order		curl murl wget
# read_timeout		2
# reconnect_auto	0
# reconnect_delay	2
# audio_dev		default
